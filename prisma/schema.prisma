// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

enum Role {
  STUDENT
  PROFESSOR
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  role          Role      @default(STUDENT)
  cfUsername    String?   @unique @map("cf_username")
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")

  accounts                Account[]
  sessions                Session[]
  professorClassrooms     Classroom[] @relation("professor")
  classrooms              Classroom[]
  pendingClassroomRequest Classroom[] @relation(name: "pendingClassroomRequest")
  problemsSolved          Problem[]   @relation(name: "problemsSolved")

  @@map(name: "users")
}

model ProblemTag {
  name String @id

  Problems    Problem[]
  ProblemList ProblemList[] @relation(name: "problemList")

  @@map("problemtags")
}

model Problem {
  id        String       @id @default(cuid())
  contestId Int          @map(name: "contest_id")
  index     String
  name      String
  type      String?
  points    Int?
  rating    Int?
  tags      ProblemTag[]

  students    User[]        @relation(name: "problemsSolved")
  problemList ProblemList[]

  @@unique([contestId, index])
  @@map("problems")
}

model Classroom {
  id          String   @id @default(cuid())
  name        String
  description String?
  professorId String   @map("professor_id")
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @updatedAt @map(name: "updated_at")
  isActive    Boolean  @default(true) @map(name: "is_active")

  professor               User          @relation(name: "professor", fields: [professorId], references: [id], onDelete: Cascade)
  students                User[]
  pendingClassroomRequest User[]        @relation(name: "pendingClassroomRequest")
  ProblemList             ProblemList[]

  @@unique([professorId, name])
  @@map("classrooms")
}

model ProblemList {
  id             String    @id @default(cuid())
  name           String
  description    String?
  createdAt      DateTime  @default(now()) @map(name: "created_at")
  releaseDate    DateTime  @default(now()) @map(name: "release_date")
  submissionDate DateTime? @map(name: "submission_date")
  classroomId    String

  tags      ProblemTag[] @relation(name: "problemList")
  problems  Problem[]
  classroom Classroom    @relation(fields: [classroomId], references: [id], onDelete: Cascade)

  @@map("problemlists")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
